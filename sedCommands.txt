  530  clear
  531  echo ls > playfile.t 
  532  sed 's#solverbot#hashbot#' < playfile.t > sedfile
  533  cat sedfile 
  534  ls > playfile.t 
  535  sed 's#solverbot#hashbot#' < playfile.t > sedfile
  536  cat sedfile 
  537  sed 's# #_#' < playfile.t > seduc
  538  cat seduc 
  539  sed 's# #_#g' < playfile.t > seduc
  540  cat seduc 
  541  ls
  542  ls | grep 9
  543  ls | grep Dec 9
  544  ls | grep "Dec 9"
  545  echo "The emach file manager dired" | sed 's/red/green/'
  546  echo "The emach file manager dired" | sed 's/ red/green/'
  547  echo "The emach file manager di red" | sed 's/ red/green/'
  548  echo "The emach file manager di red" | sed 's//green/'
  549  echo "The emach file manager di red" | sed 's/ /green/'
  550  cat seduc 
  551  sed -i 's/Command/New/' seduc 
  552  cat seduc 
  553  tldr sed
  554  sudo pacman -S tldr
  555   tldr
  556  cat seduc 
  557  cat seduc | sed '/The_New/s/t/F/'
  558  cat seduc | sed '/The_New/s/t/F/g'
  559  cat seduc | sed '/The_New/s/T/F/g'
  560  cat seduc | sed '/The_New/s/t/F/g'
  561  man sed
  562  sudo pacman -S tldr
  563  tldr
  564  whereis tldr
  565  cat seduc 
  566  cat seduc | sed 's/_Dec__9_/d'
  567  cat seduc | sed 's/_Dec__9_/d/'
  568  cat seduc 
  569  cat seduc | sed 's/_Dec__9_/d/'
  570  cat seduc 
  571  cat seduc | sed 's/_Dec__9_/d/'
  572  cat seduc | sed 's/_Dec__9_/dd/'
  573  cat seduc | sed 's/_Dec__9_/d/'
  574  cat seduc | sed 's/_Dec__9_/d/'
  575  cat seduc | sed 's/_Dec__6_/dd/'
  576  cat seduc | sed 's/_Dec__6_/dl/'
  577  cat /etc/shells | sed 's/usr/u/g'
  578  cat /etc/shells | sed -e 's/usr/u/g' -e 's/bin/b/g'
  579  cat /etc/shells | sed -e 's|usr|u|g' -e 's#bin#b#g'
  580  cat /etc/shells | sed -n '/usr/p'
  581  cat /etc/shells | sed -n '/bin/p'
  582  sed -i 's/ *$//' sedfile 
  583  cat sedfile 
  584  sed -i 's/ *//' sedfile 
  585  cat sedfile 
  586  sed -i 's/[[:space]] *//' sedfile 
  587  sed -i 's/[[:space]]*//' sedfile 
  588  sed -i 's/[[:space:]]*//' sedfile 
  589  sedfile
  590  cat sedfile 
  591  sed -i 's/[[:space:]]//' sedfile 
  592  cat sedfile 
  593  sed -i 's/[a-z]/\U&/' sedfile 
  594  cat sedfile 
  595  sed 's/[a-z]/\U&/' sedfile 
  596  sed 's/[a-z]/\U&/g' sedfile 
  597  sed 's/[A-Z]/\L&/g' sedfile 
  598  sed 11q sedfile 
  599  awk 'NR < 10' sedfile 
  600  history | tail -n 15
  601  history | tail -n 30
  602  history | tail -n 45
  603  history | tail -n 75
  604  history | tail -n 75 | sed 's/history/d'
  605  history | tail -n 75 | sed 's/history/d/'
  606  history | tail -n 75 | sed 's/[history,tail]/d/'
  607  history | tail -n 75 | sed '/[history,tail]/d/'
  608  history | tail -n 80
  609  history | tail -n 80 > /run/media/solverbot/repoA/gitFolders/botoPersonal/shellscripting/sedCommands.txt
  
Command	Description
sed -n "3p" file.txt	                        print 3rd line
sed -n '1,3p' file.txt	                      print strings from 1st to 3rd
sed -n "/[media]/,/[public]/p" smb.conf	      print strings from 1st to 3rd which contains specified string
sed -n '/[media]/,$p' smb.conf	              print strings from first mention of media till end of file
sed 5,15d file.txt	                          show all of file.txt except for lines from 5 to 15
sed '/pattern/q' file.txt	                    print all lines till pattern
sed -n '/pattern/p' file.txt	                print do matched strings (emulates grep)
sed -n '/pattern/!p' file.txt	                print do NOT matched strings (emulates grep -v)
sed -n 's/unix/linux/p' file.txt	            printing only the replaced lines
sed -n '/X/!p' file.txt	                      print lines which does not contain 'X'
sed -n '2~5p' file.txt	                      print every 5th line starting with the second
sed '/AAA.*BBB.*CCC/!d' file.txt	            grep for AAA and BBB and CCC (in that order)
sed '/AAA/!d; /BBB/!d; /CCC/!d' file.txt	    grep for AAA and BBB and CCC (in any order)
Modify

Command	Description
sed 's/foo/boo/' file.txt	                    replace first entrance foo with boo
sed 's|http://|www|' file.txt	                replace first entrance foo with boo (another divider)
sed 's/foo/boo/g' file.txt	                  replace all entrances foo with boo
sed 's/foo/boo/3' file.txt	                  replace first three entrances foo with boo
sed 's/foo/[&]/' file.txt	                    wrap foo with [ ]
sed 's/pattern1|pattern2/foo/g' file.txt	    replace pattern1 or pattern2 with foo
sed 's/\(foo\)\(boo\)/\2\1/' file.txt	        replace fooboo with boofoo
sed 's/^../XX/' file.txt	                    replace the first two characters of a string or a line with "XX"
sed -e 's/unix/linux/' -e 's/os/system/' file.txt	-e option provieds to run multiple sed commands in a single sed command
sed '3 s/foo/boo/' file.txt	                  replace string on a specific line number
sed '1,3 s/foo/boo/' file.txt	                replace string on a range of lines
sed '/pattern/ s/foo/boo/' file.txt	          replace on a lines which matches a pattern
sed '1i HEAD1, HEAD2' file.txt	              insert a header line
sed -i '1a -------' file.txt	                add a line '-------' at the 1st line
sed '5!s/foo/boo/' file.txt	                  replace foo with boo in file.txt except in the 5th line
sed '/pattern/!s/foo/boo/' file.txt	          unless pattern is found replace foo with boo
sed '/pattern/s/foo/boo/g' file.txt	          only if line contains pattern, substitute foo with boo
sed '1d;$d' file.txt	                        delete the first line AND the last line of a file
sed '/^$/d' file.txt	                        delete all blank lines in the file
sed '/foo/,$d' file.txt	                      delete the lines starting from the pattern 'foo' till the last line
sed '1,4{/foo/d;}' file.txt	                  delete the lines containing the pattern 'foo' only if it is present in the lines from 1 to 4
sed '1,20 s/foo/boo/g' file.txt	              replace foo with boo only on lines between 1 and 20
sed '1,20 !s/foo/boo/g' file.txt	            the above reversed (match all except lines 1-20)
sed '/pattern/G' file.txt	                    insert blank line below every line that match pattern
sed 'n;n;n;n;G;' file.txt	                    add a blank line every 5 lines (after lines 5, 10, 15, 20, etc.)
sed 's/^/ /' file.txt	                        insert 5 blank spaces at beginning of each line (make page offset)
sed '/foo/ a "boo"' file.txt	                add a line after a match
sed '/foo/ i "boo"' file.txt	                add a line before a match
sed '/foo/ c "boo"' file.txt	                replace an entire line with a new line
sed ‘s/^/\t/’ file.txt	                      insert a tab at beginning of each line
sed -e 's/#.*//' file.txt	                    delete all the comment lines from a file
$sed 's/.$//' file.txt	                      convert DOS newlines (CR/LF) to Unix format
sed -e '$r 2.txt' 1.txt	insert file 2.txt at the end of 1.txt
sed 's/\t/ /g' file.txt	replace tab with spaces
find ~/projects/ -type f -exec sed -i 's/nodejs/django/g' {} \;	replace in all found files
find ~/projects/ -name "*.js" -print | xargs sed -i 's/nodejs/django/g'	replace in multiple files
Delete

Command	Description
sed -n "3,10d" file.txt	delete all lines from line 3 till 10
sed '17,/foo/d' file.txt	delete all lines from line 17 to 'foo'
sed 's/^[ ^t]*//' file.txt	delete all spaces in front of every line of file.txt
sed 's/[ ^t]*$//' file.txt	delete all spaces at the end of every line of file.txt
sed 's/^[ ^t]*//;s/[ ^]*$//' file.txt	delete all spaces in front and at the end of every line of file.txt
sed '1~3d' file.txt	delete every third line, starting with the first
sed ‘/^$/d’ in.txt > out.txt	delete all the blank lines from a file
sed '0,/pattern_to_delete/{//d;}' file.txt	delete only first match from a file

How to use sed to work with a CSV file? Or How to work with any file in which fields are separated by a delimiter?

Let us consider a sample CSV file with the following content:
cat file
Solaris,25,11
Ubuntu,31,2
Fedora,21,3
LinuxMint,45,4
RedHat,12,5

1. To remove the 1st field or column :
$ sed 's/[^,]*,//' file
25,11
31,2
21,3
45,4
12,5
   This regular expression searches for a sequence of non-comma([^,]*) characters and deletes them which results in the 1st field getting removed.

2. To print only the last field, OR remove all fields except the last field:
$ sed 's/.*,//' file
11
2
3
4
5
  This regex removes everything till the last comma(.*,) which results in deleting all the fields except the last field.

3. To print only the 1st field:
$ sed 's/,.*//' file
Solaris
Ubuntu
Fedora
LinuxMint
RedHat
    This regex(,.*) removes the characters starting from the 1st comma till the end resulting in deleting all the fields except the last field.

4. To delete the 2nd field:
$ sed 's/,[^,]*,/,/' file
Solaris,11
Ubuntu,2
Fedora,3
LinuxMint,4
RedHat,5
    The regex (,[^,]*,)  searches for a comma and sequence of characters followed by a comma which results in matching the 2nd column, and replaces this pattern matched with just a comma, ultimately ending in deleting the 2nd column.
Note: To delete the fields in the middle gets more tougher in sed since every field has to be matched literally.

5. To print only the 2nd field:
$ sed 's/[^,]*,\([^,]*\).*/\1/' file
25
31
21
45
12
   The regex matches the first field, second field and the rest, however groups the 2nd field alone. The whole line is now replaced with the 2nd field(\1), hence only the 2nd field gets displayed.

6. Print only lines in which the last column is a single digit number:
$ sed -n '/.*,[0-9]$/p' file
Ubuntu,31,2
Fedora,21,3
LinuxMint,45,4
RedHat,12,5
  The regex (,[0-9]$) checks for a single digit in the last field and the p command prints the line which matches this condition.

7. To number all lines in the file:
$ sed = file | sed 'N;s/\n/ /'
1 Solaris,25,11
2 Ubuntu,31,2
3 Fedora,21,3
4 LinuxMint,45,4
5 RedHat,12,5
    This is simulation of cat -n command. awk does it easily using the special variable NR. The '=' command of sed gives the line number of every line followed by the line itself. The sed output is piped to another sed command to join every 2 lines.

8. Replace the last field by 99 if the 1st field is 'Ubuntu':
$ sed 's/\(Ubuntu\)\(,.*,\).*/\1\299/' file
Solaris,25,11
Ubuntu,31,99
Fedora,21,3
LinuxMint,45,4
RedHat,12,5
  This regex matches 'Ubuntu' and till the end except the last column and groups each of them as well. In the replacement part, the 1st and 2nd group along with the new number 99 is substituted.

9. Delete the 2nd field if the 1st field is 'RedHat':
$ sed 's/\(RedHat,\)[^,]*\(.*\)/\1\2/' file
Solaris,25,11
Ubuntu,31,2
Fedora,21,3
LinuxMint,45,4
RedHat,,5
      The 1st field 'RedHat', the 2nd field and the remaining fields are grouped, and the replacement is done with only 1st and the last group , resuting in getting the 2nd field deleted.

10. To insert a new column at the end(last column) :
$ sed 's/.*/&,A/' file
Solaris,25,11,A
Ubuntu,31,2,A
Fedora,21,3,A
LinuxMint,45,4,A
RedHat,12,5,A
   The regex (.*) matches the entire line and replacing it with the line itself (&) and the new field.

11. To insert a new column in the beginning(1st column):
$ sed 's/.*/A,&/' file
A,Solaris,25,11
A,Ubuntu,31,2
A,Fedora,21,3
A,LinuxMint,45,4
A,RedHat,12,5
     Same as last example, just the line matched is followed by the new column.

Note: sed is generally not preferred on files which has fields separated by a delimiter because it is very difficult to access fields in sed unlike awk or Perl where splitting fields is a breeze.

